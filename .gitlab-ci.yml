# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: maven:3.6-openjdk-17


variables:
  GIT_DEPTH: "50"
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=.m2/repository
    -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    -DinstallAtEnd=true
    -DdeployAtEnd=true  

stages:          # List of stages for jobs, and their order of execution
  - build
  - sonarqube-check

 # - test
 # - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
      - docker/jar
  script:
    - echo "Compiling the code..."
    - mvn $MAVEN_CLI_OPTS clean package -DskipTests=true -s $MAVEN_SETTINGS_PATH
    - echo "Compile complete."
    - echo $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)-$CI_COMMIT_SHORT_SHA > .version
#    - mvn $MAVEN_CLI_OPTS deploy -DskipTests=true -f pom.xml -s $MAVEN_SETTINGS_PATH
#    - cd ruoyi-plugins && mvn $MAVEN_CLI_OPTS clean package -DskipTests=true -s $MAVEN_SETTINGS_PATH
    - cd docker && sh copy.sh
  artifacts:
    name: "Maven artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - ".version"

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."

sonarqube-check:
  stage: sonarqube-check
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .sonar/cache
      - .m2/repository
  script:
    - mvn $MAVEN_CLI_OPTS verify sonar:sonar
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop

# deploy-job:
#   stage: deploy
#   dependencies:
#     - build-job
#   image: docker:24.0.5
#   services:
#     - docker:24.0.5-dind
#   before_script:
#     - docker info
#   cache:
#     key: "maven-$CI_COMMIT_REF_SLUG"
#     paths:
#       - docker/jar
#     policy: pull
#   only:
#     - master
#   script:
#     - docker login -u "admin" -p "Harbor12345" 172.16.86.12
#     - cd docker/ && docker build -t gateway:$CI_COMMIT_REF_SLUG -f ./ruoyi/gateway/dockerfile ./jar/gateway && docker tag gateway:$CI_COMMIT_REF_SLUG 172.16.86.12/bigdata/gateway:$CI_COMMIT_REF_SLUG && docker push 172.16.86.12/bigdata/gateway:$CI_COMMIT_REF_SLUG
#     - docker build -t auth:$CI_COMMIT_REF_SLUG -f ./ruoyi/auth/dockerfile ./jar/auth && docker tag auth:$CI_COMMIT_REF_SLUG 172.16.86.12/bigdata/auth:$CI_COMMIT_REF_SLUG && docker push 172.16.86.12/bigdata/auth:$CI_COMMIT_REF_SLUG
#     - docker build -t gdm:$CI_COMMIT_REF_SLUG -f ./ruoyi/modules/gdm/dockerfile ./jar/modules/gdm && docker tag gdm:$CI_COMMIT_REF_SLUG 172.16.86.12/bigdata/gdm:$CI_COMMIT_REF_SLUG && docker push 172.16.86.12/bigdata/gdm:$CI_COMMIT_REF_SLUG

